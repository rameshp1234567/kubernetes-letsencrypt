# Reference document:
https://github.com/marcel-dempers/docker-development-youtube-series/blob/master/kubernetes/cert-manager/README.md 

# Follow the below steps to create cert for app using ingress along with lets encrypt

# get cert-manager 
curl -LO https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.yaml

mv cert-manager.yaml cert-manager-1.0.4.yaml

# install cert-manager 
kubectl apply --validate=false -f cert-manager-1.0.4.yaml

kubectl -n cert-manager get all
# Output

NAME                                           READY   STATUS    RESTARTS   AGE
pod/cert-manager-86548b886-2b8x7               1/1     Running   0          77s
pod/cert-manager-cainjector-6d59c8d4f7-hrs2v   1/1     Running   0          77s
pod/cert-manager-webhook-578954cdd-tphpj       1/1     Running   0          77s

NAME                           TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
service/cert-manager           ClusterIP   10.96.87.136   <none>        9402/TCP   77s
service/cert-manager-webhook   ClusterIP   10.104.59.25   <none>        443/TCP    77s

NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE        
deployment.apps/cert-manager              1/1     1            1           77s
deployment.apps/cert-manager-cainjector   1/1     1            1           77s
deployment.apps/cert-manager-webhook      1/1     1            1           77s

NAME                                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/cert-manager-86548b886               1         1         1       77s
replicaset.apps/cert-manager-cainjector-6d59c8d4f7   1         1         1       77s
replicaset.apps/cert-manager-webhook-578954cdd       1         1         1       77

# Let's create some test certificates

kubectl create ns cert-manager-test

kubectl apply -f ./selfsigned/issuer.yaml

kubectl apply -f ./selfsigned/certificate1.yaml

kubectl describe certificate -n cert-manager-test
# Output
  Type    Reason     Age   From          Message
  ----    ------     ----  ----          -------
  Normal  Issuing    14s   cert-manager  Issuing certificate as Secret does not exist
  Normal  Generated  14s   cert-manager  Stored new private key in temporary Secret resource "selfsigned-cert-vdhgg"
  Normal  Requested  13s   cert-manager  Created new CertificateRequest resource "selfsigned-cert-6sp6p"
  Normal  Issuing    13s   cert-manager  The certificate has been successfully issued
  
kubectl get secrets -n cert-manager-test
# Output
NAME                  TYPE                                  DATA   AGE
default-token-zztqr   kubernetes.io/service-account-token   3      5m40s
selfsigned-cert-tls   kubernetes.io/tls                     3      25s

kubectl delete ns cert-manager-test

# Ingress Controller
# Let's deploy an Ingress controller

kubectl create ns ingress-nginx

kubectl -n ingress-nginx apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml

kubectl -n ingress-nginx get pods
# Output:
NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-gggwk        0/1     Completed   0          42s
ingress-nginx-admission-patch-84qfl         0/1     Completed   0          42s
ingress-nginx-controller-54d8b558d4-qgl8h   1/1     Running     0          46s

# Create Let's Encrypt Issuer for our cluster

kubectl apply -f cert-issuer-nginx-ingress.yaml

# check the issuer
kubectl describe clusterissuer letsencrypt-cluster-issuer

# Deploy a pod that uses SSL
kubectl apply -f deployments.yaml
kubectl apply -f services.yaml
kubectl get pods
# deploy an ingress route
kubectl apply -f ingress.yaml

# Issue Certificate
kubectl apply -f certificate.yaml

# check the cert has been issued 
kubectl describe certificate hello

# TLS created as a secret
kubectl get secrets
NAME                  TYPE                                  DATA   AGE
example-app-tls       kubernetes.io/tls                     2      84m

# create a dns name using public ip address created by cluster
# Find the public ip address (EXTERNAL-IP)
kubectl get svc -n ingress-nginx
# Output:
NAME                                 TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE
ingress-nginx-controller             LoadBalancer   10.0.127.192   20.81.112.9   80:30209/TCP,443:32655/TCP   120m
ingress-nginx-controller-admission   ClusterIP      10.0.218.123   <none>        443/TCP                      120m

#Find the same public ip adress (EXTERNAL-IP) from resource group created automatically by the same cluster
1. Open Public IP Address
2. Go to Configuration
3. add the DNS name as "helloworldz"
4. Save & run the app https://helloworldz.eastus.cloudapp.azure.com


